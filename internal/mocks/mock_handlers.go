// Code generated by MockGen. DO NOT EDIT.
// Source: main/internal/interfaces (interfaces: HealthHandlers,LinkHandlers,UsersHandlers)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHealthHandlers is a mock of HealthHandlers interface.
type MockHealthHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockHealthHandlersMockRecorder
}

// MockHealthHandlersMockRecorder is the mock recorder for MockHealthHandlers.
type MockHealthHandlersMockRecorder struct {
	mock *MockHealthHandlers
}

// NewMockHealthHandlers creates a new mock instance.
func NewMockHealthHandlers(ctrl *gomock.Controller) *MockHealthHandlers {
	mock := &MockHealthHandlers{ctrl: ctrl}
	mock.recorder = &MockHealthHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthHandlers) EXPECT() *MockHealthHandlersMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockHealthHandlers) Ping(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ping", arg0, arg1)
}

// Ping indicates an expected call of Ping.
func (mr *MockHealthHandlersMockRecorder) Ping(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHealthHandlers)(nil).Ping), arg0, arg1)
}

// MockLinkHandlers is a mock of LinkHandlers interface.
type MockLinkHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockLinkHandlersMockRecorder
}

// MockLinkHandlersMockRecorder is the mock recorder for MockLinkHandlers.
type MockLinkHandlersMockRecorder struct {
	mock *MockLinkHandlers
}

// NewMockLinkHandlers creates a new mock instance.
func NewMockLinkHandlers(ctrl *gomock.Controller) *MockLinkHandlers {
	mock := &MockLinkHandlers{ctrl: ctrl}
	mock.recorder = &MockLinkHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkHandlers) EXPECT() *MockLinkHandlersMockRecorder {
	return m.recorder
}

// AddLink mocks base method.
func (m *MockLinkHandlers) AddLink(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLink", arg0, arg1)
}

// AddLink indicates an expected call of AddLink.
func (mr *MockLinkHandlersMockRecorder) AddLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLink", reflect.TypeOf((*MockLinkHandlers)(nil).AddLink), arg0, arg1)
}

// AddLinkInText mocks base method.
func (m *MockLinkHandlers) AddLinkInText(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLinkInText", arg0, arg1)
}

// AddLinkInText indicates an expected call of AddLinkInText.
func (mr *MockLinkHandlersMockRecorder) AddLinkInText(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLinkInText", reflect.TypeOf((*MockLinkHandlers)(nil).AddLinkInText), arg0, arg1)
}

// AddLinks mocks base method.
func (m *MockLinkHandlers) AddLinks(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLinks", arg0, arg1)
}

// AddLinks indicates an expected call of AddLinks.
func (mr *MockLinkHandlersMockRecorder) AddLinks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLinks", reflect.TypeOf((*MockLinkHandlers)(nil).AddLinks), arg0, arg1)
}

// GetLink mocks base method.
func (m *MockLinkHandlers) GetLink(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetLink", arg0, arg1)
}

// GetLink indicates an expected call of GetLink.
func (mr *MockLinkHandlersMockRecorder) GetLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLink", reflect.TypeOf((*MockLinkHandlers)(nil).GetLink), arg0, arg1)
}

// MockUsersHandlers is a mock of UsersHandlers interface.
type MockUsersHandlers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersHandlersMockRecorder
}

// MockUsersHandlersMockRecorder is the mock recorder for MockUsersHandlers.
type MockUsersHandlersMockRecorder struct {
	mock *MockUsersHandlers
}

// NewMockUsersHandlers creates a new mock instance.
func NewMockUsersHandlers(ctrl *gomock.Controller) *MockUsersHandlers {
	mock := &MockUsersHandlers{ctrl: ctrl}
	mock.recorder = &MockUsersHandlersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersHandlers) EXPECT() *MockUsersHandlersMockRecorder {
	return m.recorder
}

// DeleteLinks mocks base method.
func (m *MockUsersHandlers) DeleteLinks(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteLinks", arg0, arg1)
}

// DeleteLinks indicates an expected call of DeleteLinks.
func (mr *MockUsersHandlersMockRecorder) DeleteLinks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinks", reflect.TypeOf((*MockUsersHandlers)(nil).DeleteLinks), arg0, arg1)
}

// GetLinks mocks base method.
func (m *MockUsersHandlers) GetLinks(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetLinks", arg0, arg1)
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockUsersHandlersMockRecorder) GetLinks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockUsersHandlers)(nil).GetLinks), arg0, arg1)
}
