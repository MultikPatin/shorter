// Code generated by MockGen. DO NOT EDIT.
// Source: main/internal/interfaces (interfaces: HealthService,LinksService,UsersService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "main/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHealthService is a mock of HealthService interface.
type MockHealthService struct {
	ctrl     *gomock.Controller
	recorder *MockHealthServiceMockRecorder
}

// MockHealthServiceMockRecorder is the mock recorder for MockHealthService.
type MockHealthServiceMockRecorder struct {
	mock *MockHealthService
}

// NewMockHealthService creates a new mock instance.
func NewMockHealthService(ctrl *gomock.Controller) *MockHealthService {
	mock := &MockHealthService{ctrl: ctrl}
	mock.recorder = &MockHealthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthService) EXPECT() *MockHealthServiceMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockHealthService) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockHealthServiceMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockHealthService)(nil).Ping))
}

// MockLinksService is a mock of LinksService interface.
type MockLinksService struct {
	ctrl     *gomock.Controller
	recorder *MockLinksServiceMockRecorder
}

// MockLinksServiceMockRecorder is the mock recorder for MockLinksService.
type MockLinksServiceMockRecorder struct {
	mock *MockLinksService
}

// NewMockLinksService creates a new mock instance.
func NewMockLinksService(ctrl *gomock.Controller) *MockLinksService {
	mock := &MockLinksService{ctrl: ctrl}
	mock.recorder = &MockLinksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinksService) EXPECT() *MockLinksServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLinksService) Add(arg0 context.Context, arg1 models.OriginLink, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockLinksServiceMockRecorder) Add(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLinksService)(nil).Add), arg0, arg1, arg2)
}

// AddBatch mocks base method.
func (m *MockLinksService) AddBatch(arg0 context.Context, arg1 []models.OriginLink, arg2 string) ([]models.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBatch indicates an expected call of AddBatch.
func (mr *MockLinksServiceMockRecorder) AddBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBatch", reflect.TypeOf((*MockLinksService)(nil).AddBatch), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockLinksService) Get(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLinksServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLinksService)(nil).Get), arg0, arg1)
}

// MockUsersService is a mock of UsersService interface.
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService.
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance.
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// DeleteLinks mocks base method.
func (m *MockUsersService) DeleteLinks(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLinks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLinks indicates an expected call of DeleteLinks.
func (mr *MockUsersServiceMockRecorder) DeleteLinks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLinks", reflect.TypeOf((*MockUsersService)(nil).DeleteLinks), arg0, arg1)
}

// GetLinks mocks base method.
func (m *MockUsersService) GetLinks(arg0 context.Context, arg1 string) ([]models.UserLinks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinks", arg0, arg1)
	ret0, _ := ret[0].([]models.UserLinks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockUsersServiceMockRecorder) GetLinks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockUsersService)(nil).GetLinks), arg0, arg1)
}

// Login mocks base method.
func (m *MockUsersService) Login() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUsersServiceMockRecorder) Login() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUsersService)(nil).Login))
}
